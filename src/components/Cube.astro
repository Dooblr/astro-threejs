---
// Cube.astro - Fixed Three.js component with proper error handling
---

<div id="three-container" class="loading">Loading Three.js Cube...</div>

<script>
  import * as THREE from 'three';
  
  let cleanup = null;
  
  function initCube() {
    const container = document.getElementById('three-container');
    if (!container) {
      console.error('Three.js container not found');
      return;
    }
    
    try {
      console.log('Initializing Three.js cube...');
      
      // Remove loading class
      container.classList.remove('loading');
      
      // Scene setup
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0x0a0a0a);
      
      // Camera setup with better defaults
      const camera = new THREE.PerspectiveCamera(
        75, 
        container.clientWidth / container.clientHeight, 
        0.1, 
        1000
      );
      camera.position.set(0, 0, 5);

      // Renderer setup with improved settings
      const renderer = new THREE.WebGLRenderer({ 
        antialias: true,
        alpha: false,
        powerPreference: "high-performance"
      });
      
      renderer.setSize(container.clientWidth, container.clientHeight);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      renderer.setClearColor(0x0a0a0a, 1);
      renderer.shadowMap.enabled = true;
      renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      
      // Clear container and add canvas
      container.innerHTML = '';
      container.appendChild(renderer.domElement);

      // Create enhanced cube with better materials
      const geometry = new THREE.BoxGeometry(2, 2, 2);
      
      // Create wireframe material with glow effect
      const wireframeMaterial = new THREE.MeshBasicMaterial({
        color: 0x00d4ff,
        wireframe: true,
        transparent: true,
        opacity: 0.8
      });
      
      // Create solid material for faces
      const solidMaterial = new THREE.MeshPhongMaterial({
        color: 0x1a1a2e,
        transparent: true,
        opacity: 0.1,
        side: THREE.DoubleSide
      });
      
      // Create cube group
      const cubeGroup = new THREE.Group();
      
      // Solid cube
      const solidCube = new THREE.Mesh(geometry, solidMaterial);
      cubeGroup.add(solidCube);
      
      // Wireframe cube
      const wireframeCube = new THREE.Mesh(geometry, wireframeMaterial);
      cubeGroup.add(wireframeCube);
      
      scene.add(cubeGroup);

      // Add lighting for better visual effects
      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0x00d4ff, 0.8);
      directionalLight.position.set(5, 5, 5);
      directionalLight.castShadow = true;
      scene.add(directionalLight);
      
      const pointLight = new THREE.PointLight(0xff6b6b, 0.5);
      pointLight.position.set(-5, -5, 5);
      scene.add(pointLight);

      // Animation variables
      let mouseX = 0;
      let mouseY = 0;
      let targetRotationX = 0;
      let targetRotationY = 0;
      
      // Mouse interaction
      function onMouseMove(event) {
        const rect = container.getBoundingClientRect();
        mouseX = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        mouseY = -((event.clientY - rect.top) / rect.height) * 2 + 1;
        
        targetRotationX = mouseY * 0.5;
        targetRotationY = mouseX * 0.5;
      }
      
      container.addEventListener('mousemove', onMouseMove);

      // Animation loop with smooth interpolation
      function animate() {
        requestAnimationFrame(animate);
        
        const time = Date.now() * 0.001;
        
        // Smooth rotation based on mouse
        cubeGroup.rotation.x += (targetRotationX - cubeGroup.rotation.x) * 0.05;
        cubeGroup.rotation.y += (targetRotationY - cubeGroup.rotation.y) * 0.05;
        
        // Add continuous rotation
        cubeGroup.rotation.x += 0.005;
        cubeGroup.rotation.y += 0.01;
        
        // Floating animation
        cubeGroup.position.y = Math.sin(time) * 0.2;
        
        // Animate lighting
        pointLight.position.x = Math.sin(time * 2) * 3;
        pointLight.position.z = Math.cos(time * 2) * 3;
        
        // Update wireframe opacity for breathing effect
        wireframeMaterial.opacity = 0.6 + Math.sin(time * 3) * 0.2;
        
        renderer.render(scene, camera);
      }
      animate();

      // Handle window resize
      function handleResize() {
        if (!container.parentElement) return;
        
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        if (width === 0 || height === 0) return;
        
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        
        renderer.setSize(width, height);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      }
      
      window.addEventListener('resize', handleResize);
      
      // Initial resize
      handleResize();
      
      // Cleanup function
      cleanup = () => {
        container.removeEventListener('mousemove', onMouseMove);
        window.removeEventListener('resize', handleResize);
        
        if (container.contains(renderer.domElement)) {
          container.removeChild(renderer.domElement);
        }
        
        // Dispose of Three.js resources
        renderer.dispose();
        geometry.dispose();
        wireframeMaterial.dispose();
        solidMaterial.dispose();
        
        scene.clear();
      };
      
    } catch (error) {
      console.error('Error initializing Three.js cube:', error);
      container.innerHTML = '<div class="error">Failed to load Three.js cube<br>Please refresh the page</div>';
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCube);
  } else {
    // DOM is already loaded
    setTimeout(initCube, 100);
  }
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (cleanup) {
      cleanup();
    }
  });
</script>

<style>
  #three-container {
    width: 100%;
    height: 100%;
    position: relative;
    border-radius: inherit;
    overflow: hidden;
  }
  
  #three-container canvas {
    display: block;
    width: 100% !important;
    height: 100% !important;
    border-radius: inherit;
  }
  
  #three-container.loading {
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--glass-bg);
    color: var(--text-secondary);
    font-size: 16px;
  }
</style>